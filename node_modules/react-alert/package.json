{
  "_from": "react-alert",
  "_id": "react-alert@6.0.0",
  "_inBundle": false,
  "_integrity": "sha512-Y9zbMUlE70VmW87R8T4DHnEecWVFyl0ITkDf93XOO/2U38etAYheUlihileVnNYFvlrWE4SpPJk4AWLOvAqYPg==",
  "_location": "/react-alert",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-alert",
    "fetchSpec": "latest",
    "name": "react-alert",
    "raw": "react-alert",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-alert/-/react-alert-6.0.0.tgz",
  "_shasum": "892405f87b1e8c51de00a2cf9c92a72ca32814cc",
  "_shrinkwrap": null,
  "_spec": "react-alert",
  "_where": "C:\\Users\\user\\Documents\\projects\\finder_rules\\finder_rules_web",
  "author": {
    "email": "rn.schiehll@gmail.com",
    "name": "Reinaldo Schiehll"
  },
  "bugs": {
    "url": "https://github.com/schiehll/react-alert/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@testing-library/jest-dom": "^4.1.2",
    "@testing-library/react": "^9.3.0",
    "prop-types": "^15.7.2",
    "react-transition-group": "^4.3.0"
  },
  "deprecated": false,
  "description": "A simple react alert component",
  "devDependencies": {
    "@babel/cli": "^7.6.4",
    "@babel/core": "^7.6.4",
    "@babel/preset-env": "^7.6.3",
    "@babel/preset-react": "^7.6.3",
    "babel-eslint": "10.0.3",
    "babel-preset-stage-1": "^6.24.1",
    "eslint": "^6.5.1",
    "eslint-plugin-react": "^7.16.0",
    "eslint-plugin-react-hooks": "^2.1.2",
    "husky": "^3.0.9",
    "jest-cli": "^24.9.0",
    "lint-staged": "^9.4.2",
    "pascal-case": "^2.0.1",
    "prettier": "^1.18.2",
    "react": "^16.10.2",
    "react-dom": "^16.10.2",
    "rollup": "^1.23.1",
    "rollup-plugin-babel": "^4.3.3",
    "rollup-plugin-commonjs": "^10.1.0",
    "rollup-plugin-node-resolve": "^5.2.0",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-uglify": "^6.0.3"
  },
  "homepage": "https://github.com/schiehll/react-alert#readme",
  "jest": {
    "collectCoverageFrom": [
      "!src/index.js",
      "src/*.js"
    ]
  },
  "keywords": [
    "alert",
    "react",
    "react-alert",
    "react-component",
    "react-toaster",
    "toaster"
  ],
  "license": "MIT",
  "main": "dist/cjs/react-alert.js",
  "module": "dist/esm/react-alert.js",
  "name": "react-alert",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.8.1",
    "react-dom": "^16.8.1"
  },
  "readme": "# react-alert\n\n> alerts for React\n\n[![travis build](https://img.shields.io/travis/schiehll/react-alert.svg?style=flat-square)](https://travis-ci.org/schiehll/react-alert)\n[![version](https://img.shields.io/npm/v/react-alert.svg?style=flat-square)](http://npm.im/react-alert)\n\n## Demo\n\n[![Edit l2mo430lzq](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/l2mo430lzq)\n\n## Installation\n\n```bash\n$ npm install --save react-alert\n```\n\n### Templates\n\nYou can provide your own alert template if you need to. Otherwise you can just plug in one of the following:\n\n* [Basic](https://github.com/schiehll/react-alert-template-basic)\n* [Dark](https://github.com/schiehll/react-alert-template-oldschool-dark)\n\nFeel free to submit a PR with the link for your own template.\n\nTo get started, try installing the basic one:\n\n```bash\n$ npm install --save react-alert react-alert-template-basic\n```\n\n### Peer dependencies\n\nThis package expect the following peer dependencies:\n\n```\n  \"react\": \"^16.8.1\"\n  \"react-dom\": \"^16.8.1\"\n```\n\nSo make sure that you have those installed too!\n\n## Usage\n\nFirst you have to wrap your app with the Provider giving it the alert template and optionally some options:\n\n```js\n// index.js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport App from './App'\n\n// optional cofiguration\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n\nconst Root = () => (\n  <AlertProvider template={AlertTemplate} {...options}>\n    <App />\n  </AlertProvider>\n)\n\nrender(<Root />, document.getElementById('root'))\n```\n\nThen import the `useAlert` hook to be able to show alerts:\n\n```js\n// App.js\nimport React from 'react'\nimport { useAlert } from 'react-alert'\n\nconst App = () => {\n  const alert = useAlert()\n\n  return (\n    <button\n      onClick={() => {\n        alert.show('Oh look, an alert!')\n      }}\n    >\n      Show Alert\n    </button>\n  )\n}\n\nexport default App\n```\n\nAnd that's it!\n\nYou can also use it with a HOC:\n\n```js\nimport React from 'react'\nimport { withAlert } from 'react-alert'\n\nconst App = ({ alert }) => (\n  <button\n    onClick={() => {\n      alert.show('Oh look, an alert!')\n    }}\n  >\n    Show Alert\n  </button>\n)\n\nexport default withAlert()(App)\n```\n\n## Options\n\nYou can pass the following options as props to `Provider`:\n\n```js\noffset: PropTypes.string // the margin of each alert\nposition: PropTypes.oneOf([\n  'top left',\n  'top right',\n  'top center',\n  'middle left',\n  'middle',\n  'middle right',\n  'bottom left',\n  'bottom right',\n  'bottom center'\n]) // the position of the alerts in the page\ntimeout: PropTypes.number // timeout to alert remove itself, if  set to 0 it never removes itself\ntype: PropTypes.oneOf(['info', 'success', 'error']) // the default alert type used when calling this.props.alert.show\ntransition: PropTypes.oneOf(['fade', 'scale']) // the transition animation\ncontainerStyle: PropTypes.Object // style to be applied in the alerts container\ntemplate: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired // the alert template to be used\n```\n\nNote that the position, type and transition strings are available as constants which can be imported the next way:\n\n```js\nimport { positions, transitions, types } from 'react-alert'\n```\n\nand have such values:\n\n```js\nexport const positions = {\n  TOP_LEFT: 'top left',\n  TOP_CENTER: 'top center',\n  TOP_RIGHT: 'top right',\n  MIDDLE_LEFT: 'middle left',\n  MIDDLE: 'middle',\n  MIDDLE_RIGHT: 'middle right',\n  BOTTOM_LEFT: 'bottom left',\n  BOTTOM_CENTER: 'bottom center',\n  BOTTOM_RIGHT: 'bottom right'\n}\n\nexport const types = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  ERROR: 'error'\n}\n\nexport const transitions = {\n  FADE: 'fade',\n  SCALE: 'scale'\n}\n```\n\nHere's the defaults:\n\n```js\noffset: '10px'\nposition: positions.TOP_CENTER\ntimeout: 0\ntype: types.INFO\ntransition: transitions.FADE,\ncontainerStyle: {\n  zIndex: 100\n}\n```\n\nThose options will be applied to all alerts (please, also have a look at [edge-cases](#showing-alerts-in-different-positions-at-the-same-time))\n\n## Api\n\nAfter getting the `alert` with the `useAlert` hook, this is what you can do with it:\n\n```js\n// show\nconst alert = alert.show('Some message', {\n  timeout: 2000, // custom timeout just for this one alert\n  type: 'success',\n  onOpen: () => {\n    console.log('hey')\n  }, // callback that will be executed after this alert open\n  onClose: () => {\n    console.log('closed')\n  } // callback that will be executed after this alert is removed\n})\n\n// info\n// just an alias to alert.show(msg, { type: 'info' })\nconst alert = alert.info('Some info', {\n  timeout: 2000, // custom timeout just for this one alert\n  onOpen: () => {\n    console.log('hey')\n  }, // callback that will be executed after this alert open\n  onClose: () => {\n    console.log('closed')\n  } // callback that will be executed after this alert is removed\n})\n\n// success\n// just an alias to alert.show(msg, { type: 'success' })\nconst alert = alert.success('Some success', {\n  timeout: 2000, // custom timeout just for this one alert\n  onOpen: () => {\n    console.log('hey')\n  }, // callback that will be executed after this alert open\n  onClose: () => {\n    console.log('closed')\n  } // callback that will be executed after this alert is removed\n})\n\n// error\n// just an alias to alert.show(msg, { type: 'error' })\nconst alert = alert.error('Some error', {\n  timeout: 2000, // custom timeout just for this one alert\n  onOpen: () => {\n    console.log('hey')\n  }, // callback that will be executed after this alert open\n  onClose: () => {\n    console.log('closed')\n  } // callback that will be executed after this alert is removed\n})\n\n// remove\n// use it to remove an alert programmatically\nalert.remove(alert)\n\n// removeAll\n// use it to remove all alerts programmatically\nalert.removeAll()\n```\n\n## Using a custom alert template\n\nIf you ever need to have an alert just the way you want, you can provide your own template! Here's a simple example:\n\n```js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider as AlertProvider } from 'react-alert'\nimport App from './App'\n\n// the style contains only the margin given as offset\n// options contains all alert given options\n// message is the alert message\n// close is a function that closes the alert\nconst AlertTemplate = ({ style, options, message, close }) => (\n  <div style={style}>\n    {options.type === 'info' && '!'}\n    {options.type === 'success' && ':)'}\n    {options.type === 'error' && ':('}\n    {message}\n    <button onClick={close}>X</button>\n  </div>\n)\n\nconst Root = () => (\n  <AlertProvider template={AlertTemplate}>\n    <App />\n  </AlertProvider>\n)\n\nrender(<Root />, document.getElementById('root'))\n```\n\nEasy, right?\n\n## Using a component as a message\n\nYou can also pass in a component as a message, like this:\n\n```js\nalert.show(<div style={{ color: 'blue' }}>Some Message</div>)\n```\n\n## Showing alerts in different positions at the same time\n\nFirst of all, if have a need to separate the logic of showing alerts in different\npositions at the same time it is possible to use multiple AlertProviders in one project and\nnest them across the DOM tree. Also you can use different Contexts to get the references\nto each type of alert separately.\n\n```js\nimport React, { createContext } from 'react'\nimport { render } from 'react-dom'\nimport { useAlert, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst TopRightAlertContext = createContext()\n\nconst App = () => {\n  const alert = useAlert()\n  const topRightAlert = useAlert(TopRightAlertContext)\n\n  return (\n    <div>\n      <button onClick={() => alert.show('Oh look, an alert!')}>\n        Show Alert\n      </button>\n      <button\n        onClick={() =>\n          topRightAlert.show('Oh look, an alert in the top right corner!')\n        }\n      >\n        Show Top Right Alert\n      </button>\n    </div>\n  )\n}\n\nconst Root = () => (\n  <AlertProvider template={AlertTemplate}>\n    <AlertProvider\n      template={AlertTemplate}\n      position={positions.TOP_RIGHT}\n      context={TopRightAlertContext}\n    >\n      <App />\n    </AlertProvider>\n  </AlertProvider>\n)\n\nrender(<Root />, document.getElementById('root'))\n```\n\nAnother use case is when you don't want to nest a couple of AlertProviders\nbecause it will somehow complicate management of alerts (for example when you\nneed to show alerts in more than three different positions).\n\nIn this case you can pass the position directly to the alert. The alerts without\nindividual position property will take it from the Provider.\nInstead, passing the position to methods `show`, `success`, `info`, `error` will\noverlap the Provider's position.\n\nPassing the property `position` will look like this:\n\n```js\nalert.show('Oh look, an alert!', { position: positions.BOTTOM_LEFT })\n```\n\nAn example of showing alerts simultaneously in three different positions:\n\n```js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport {\n  Provider as AlertProvider,\n  useAlert,\n  positions,\n  transitions\n} from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst alertOptions = {\n  offset: '25px',\n  timeout: 3000,\n  transition: transitions.SCALE\n}\n\nconst App = () => {\n  const alert = useAlert()\n\n  const showAlert = () => {\n    alert.show('Oh look, an alert!', { position: positions.BOTTOM_LEFT }) //alert will be shown in bottom left\n    alert.show('Oh look, an alert!', { position: positions.BOTTOM_RIGHT }) //alert will be shown in bottom right\n    alert.show('Oh look, an alert!') //alert will use the Provider's position `top right`\n  }\n\n  return <button onClick={showAlert}>Show Alert</button>\n}\n\nconst Root = () => (\n  <AlertProvider template={AlertTemplate}>\n    <AlertProvider\n      template={AlertTemplate}\n      position={positions.TOP_RIGHT} //default position for all alerts without individual position\n      {...alertOptions}\n    >\n      <App />\n    </AlertProvider>\n  </AlertProvider>\n)\n\nrender(<Root />, document.getElementById('root'))\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/schiehll/react-alert.git"
  },
  "scripts": {
    "build": "node ./scripts/build.js",
    "lint": "eslint './src/**/*.js'",
    "prepublish": "yarn build",
    "test": "jest --coverage --no-cache",
    "test:watch": "jest --watch --coverage --no-cache"
  },
  "version": "6.0.0"
}
